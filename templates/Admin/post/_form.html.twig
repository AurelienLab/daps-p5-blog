<script type="text/javascript">
    function tagSelect() {
        return {
            open: false,
            textInput: '',
            tags: [],
            init() {
                this.tags = JSON.parse(this.$el.parentNode.getAttribute('data-tags'));
            },
            addTag(tag, id = null) {
                tag = tag.trim()
                if (tag != "" && !this.hasTag(tag)) {
                    if (id == null) {
                        this.tags.push({name: tag})
                    } else {
                        this.tags.push({name: tag, id: id})
                    }
                }
                this.clearSearch()
                this.$refs.textInput.focus()
                this.fireTagsUpdateEvent()
            },
            fireTagsUpdateEvent() {
                this.$refs.tagsValue.value = JSON.stringify(this.tags)
                this.$el.dispatchEvent(new CustomEvent('tags-update', {
                    detail: {tags: this.tags},
                    bubbles: true,
                }));
            },
            hasTag(tag) {
                var tag = this.tags.find(e => {
                    return e.name.toLowerCase() === tag.toLowerCase()
                })
                return tag != undefined
            },
            removeTag(index) {
                this.tags.splice(index, 1)
                this.fireTagsUpdateEvent()
            },
            search(q) {
                if (q != '') {
                    fetch('{{ route('admin.tag.search') }}/' + q)
                        .then(res => {
                            if (res.ok) {
                                return res.json()
                            }
                        })
                        .then(data => {
                            for (item of document.querySelectorAll('.js-tag-result')) {
                                console.log(item)
                                item.remove()
                            }
                            console.log(data)
                            const searchResults = document.getElementById('tag_search_results')
                            for (item of data) {
                                let frag = document.createRange().createContextualFragment(`<a @click.prevent="addTag('${item.name}', ${item.id})"
                                           class="block py-1 px-5 cursor-pointer hover:bg-indigo-600 hover:text-white js-tag-result">${item.name}</a>`);
                                searchResults.prepend(frag)
                            }
                        })
                }
                this.toggleSearch()
            },
            clearSearch() {
                this.textInput = ''
                this.toggleSearch()

            },
            toggleSearch() {
                this.open = this.textInput != ''
            }
        }
    }
</script>

<div class="space-y-12">
    <div class="border-b border-gray-900/10 pb-12">
        <div class="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
            <div class="sm:col-span-4">
                <div class="sm:col-span-3">
                    <label for="title" class="block text-sm font-medium leading-6 text-gray-900">Titre de
                        l'article</label>
                    <div class="mt-2">
                        <input type="text" name="title" id="title" value="{{ post.title }}"
                               class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
                    </div>
                    <p class="mt-1 text-red-400 text-sm">{{ error('title') }}</p>
                </div>
            </div>

            <div class="sm:col-span-4">
                <div class="sm:col-span-3">
                    <label for="slug" class="block text-sm font-medium leading-6 text-gray-900">Slug</label>
                    <div class="mt-2">
                        <input type="text" name="slug" id="slug" value="{{ post.slug }}"
                               class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
                    </div>
                    <p class="mt-1 text-red-400 text-sm">{{ error('slug') }}</p>
                    <p class="mt-1 max-w-2xl text-sm leading-6 text-gray-400">Texte affiché dans la barre
                        d'adresse.<br> Laissez vide pour le générer automatiquement à partir du titre</p>

                </div>
            </div>

            <div class="sm:col-span-4">
                <div class="sm:col-span-3">
                    <label for="category_id" class="block text-sm font-medium leading-6 text-gray-900">Catégorie</label>
                    <div class="mt-2">
                        <select id="category_id" name="category_id"
                                class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6">
                            <option value="">Choisir une catégorie</option>
                            {% for category in categories %}
                                <option value="{{ category.id }}"
                                        {% if post.category.id == category.id %}selected="selected"{% endif %}>{{ category.name }}</option>
                            {% endfor %}

                        </select>
                    </div>
                    <p class="mt-1 text-red-400 text-sm">{{ error('category_id') }}</p>
                </div>
            </div>

            <div class="sm:col-span-6">
                <div x-data @tags-update="console.log('tags updated', $event.detail.tags)"
                     data-tags='{{ post.getTagsJson }}'
                     class="sm:col-span-3"
                     id="js-tags-parent">
                    <label for="category_id" class="block text-sm font-medium leading-6 text-gray-900">Tags</label>
                    <div x-data="tagSelect()" x-init="init()" @click.away="clearSearch()"
                         @keydown.escape="clearSearch()">
                        <div class="relative mt-2" @keydown.enter.prevent="addTag(textInput)">

                            <input type="hidden" name="tags" value="{{ post.getTagsJson }}" x-ref="tagsValue"/>
                            <input x-model="textInput" x-ref="textInput" @input="search($event.target.value)"
                                   class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6"
                                   placeholder="Entrez le nom d'un tag">
                            <div :class="[open ? 'block' : 'hidden']">
                                <div class="absolute z-40 left-0 mt-2 w-full">
                                    <div id="tag_search_results"
                                         class="py-1 text-sm bg-white rounded shadow-lg border border-gray-300">
                                        <a @click.prevent="addTag(textInput)"
                                           class="block py-1 px-5 cursor-pointer hover:bg-indigo-600 hover:text-white">Créer
                                            le tag "<span class="font-semibold" x-text="textInput"></span>"</a>
                                    </div>
                                </div>
                            </div>
                            <!-- selections -->
                            <template x-for="(tag, index) in tags">
                                <div class="bg-indigo-100 inline-flex items-center text-sm rounded mt-2 mr-1">
                                    <span class="ml-2 mr-1 leading-relaxed truncate max-w-xs" x-text="tag.name"></span>
                                    <button @click.prevent="removeTag(index)"
                                            class="w-6 h-8 inline-block align-middle text-gray-500 hover:text-gray-600 focus:outline-none">
                                        <svg class="w-6 h-6 fill-current mx-auto" xmlns="http://www.w3.org/2000/svg"
                                             viewBox="0 0 24 24">
                                            <path fill-rule="evenodd"
                                                  d="M15.78 14.36a1 1 0 0 1-1.42 1.42l-2.82-2.83-2.83 2.83a1 1 0 1 1-1.42-1.42l2.83-2.82L7.3 8.7a1 1 0 0 1 1.42-1.42l2.83 2.83 2.82-2.83a1 1 0 0 1 1.42 1.42l-2.83 2.83 2.83 2.82z"/>
                                        </svg>
                                    </button>
                                </div>
                            </template>
                        </div>
                    </div>
                </div>
            </div>


            <div class="col-span-full">
                <label for="chapo" class="block text-sm font-medium leading-6 text-gray-900">Introduction /
                    Chapô</label>
                <div class="mt-2">
                    <textarea id="chapo" name="chapo" rows="3" required="required"
                              class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">{{ post.chapo }}</textarea>
                </div>
                <p class="mt-1 text-red-400 text-sm">{{ error('chapo') }}</p>
                <p class="mt-3 text-sm leading-6 text-gray-400">Texte qui sera affiché en introduction dans les pages de
                    listing et sur la homepage</p>
            </div>

            <div class="sm:col-span-2">
                <label for="read_time" class="block text-sm font-medium leading-6 text-gray-900">Temps de lecture
                    (min)</label>
                <div class="mt-2">
                    <input type="number" name="read_time" id="read_time" value="{{ post.readTime }}" required="required"
                           class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
                </div>
                <p class="mt-1 text-red-400 text-sm">{{ error('read_time') }}</p>
            </div>

            <div class="col-span-full">
                <label for="contentEditor" class="block text-sm font-medium leading-6 text-gray-900">Contenu</label>
                <p class="mt-1 text-red-400 text-sm">{{ error('content') }}</p>
                <div class="mt-2">
                    <div id="contentEditor" data-value="{{ post.content }}"
                         class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 cursor-text"></div>
                </div>
                <input type="hidden" name="content" id="content">
            </div>


            <div class="col-span-full">
                <span class="block text-sm font-medium leading-6 text-gray-900">Image de couverture</span>
                <label for="dropzone-file" id="cover-dropzone"
                       class="flex flex-col items-center justify-center w-full h-30 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100 mt-2">
                    <div class="flex flex-col items-center justify-center pt-5 pb-6">
                        <svg class="w-8 h-8 mb-4 text-gray-500" aria-hidden="true"
                             xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/>
                        </svg>
                        <p class="mb-2 text-sm text-gray-500"><span class="font-semibold">Click to upload</span>
                            or drag and drop</p>
                        <p class="text-xs text-gray-500">SVG, PNG, JPG or GIF (MAX. 800x400px)</p>
                        <img src="{{ post.featuredImage }}"
                             class="mt-4 mx-auto max-h-40 {% if post.featuredImage is not defined %}hidden{% endif %}"
                             id="preview">
                    </div>
                    <p class="mt-1 text-red-400 text-sm">{{ error('featured_image') }}</p>
                    <input id="dropzone-file" name="featured_image" type="file" class="hidden"/>
                </label>
            </div>

            <div class="sm:col-span-3">
                <label for="published_at" class="block text-sm font-medium leading-6 text-gray-900">Date & Heure de
                    publication</label>
                <div class="relative mt-2 rounded-md shadow-sm">
                    <input type="datetime-local" name="published_at" id="published_at"
                           value="{{ post.publishedAt|date('Y-m-d\\TH:i') }}"
                           class="block w-full rounded-md border-0 py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                    >
                </div>
                <p class="mt-1 text-red-400 text-sm">{{ error('published_at') }}</p>
            </div>
            {% include 'Admin/_components/form/_switch.html.twig' with {
                switch_value: post.status,
                switch_field_name: 'status',
                switch_label: 'Publié'
            } %}
        </div>
    </div>
</div>

<div class="mt-6 flex items-center justify-end gap-x-6">
    {{ csrf('post_form') }}
    <a href="{{ route('admin.post.index') }}" class="text-sm font-semibold leading-6 text-gray-900">Annuler</a>
    <button type="submit"
            class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
        Enregistrer
    </button>
</div>
